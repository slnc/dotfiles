require("slnc.remap")
require("slnc.set")

-- highlight ExtraWhitespace ctermbg=red
-- highlight ColorColumn ctermbg=0
-- highlight DiffAdd ctermfg=black ctermbg=darkgreen
-- highlight DiffDelete ctermfg=lightred ctermbg=darkred
-- highlight DiffChange ctermfg=black ctermbg=brown
-- highlight DiffText ctermfg=black ctermbg=yellow
-- highlight ColorColumn ctermbg=8
--
-- " Visual mode pressing * or # searches for the current selection
-- vnoremap <silent> * :call VisualSelection('f')<CR>
-- vnoremap <silent> # :call VisualSelection('b')<CR>
--
-- " Disable default shortcut to enter Ex mode.
-- noremap Q <ESC>
--
-- " Whe moving up (<C-e>) or down (<C-y>) do it 3 by 3 lines instead of 1 by 1
-- nnoremap <C-e> 3<C-e>
-- nnoremap <C-y> 3<C-y>
--
-- " Allow POSIX regexps in searches
-- nnoremap / /\v
-- cnoremap %s/ %s/\v
--
-- " Show full file path
-- nnoremap <C-g> :echo expand('%:p')<CR>
--
-- map <Leader>nt :tabnew<CR>
-- nmap <leader>w :e ~/.worklog.md<CR>
--
--
-- " Function to remove trailing whitespace from the currently opened file
-- fun! <SID>StripTrailingWhitespaces()
--     let l = line(".")
--     let c = col(".")
--     %s/\s\+$//e
--     call cursor(l, c)
-- endfun
--
-- augroup configgroup
--   autocmd!
--   autocmd QuickFixCmdPost [^l]* nested cwindow
--   autocmd QuickFixCmdPost    l* nested lwindow
--
--   autocmd BufEnter * highlight ColorColumn ctermbg=0
--   autocmd BufEnter * match ExtraWhitespace /\s\+$/
--   autocmd BufRead,BufNewFile *.wiki :set ft=markdown formatoptions-=tc
--   autocmd BufWritePre * :silent call <SID>StripTrailingWhitespaces()
--   autocmd ColorScheme * highlight ColorColumn ctermbg=0
--   autocmd ColorScheme * highlight ExtraWhitespace ctermbg=red
--   autocmd FileType bzl AutoFormatBuffer buildifier
--   autocmd FileType c,cpp,proto,javascript,typescript AutoFormatBuffer clang-format
--   autocmd FileType dart AutoFormatBuffer dartfmt
--   autocmd FileType gn AutoFormatBuffer gn
--   autocmd FileType go AutoFormatBuffer gofmt
--   autocmd FileType go set shiftwidth=2
--   autocmd FileType go set tabstop=2
--   autocmd FileType go set textwidth=80
--   autocmd FileType go setlocal noexpandtab
--   " autocmd FileType html,css,sass,scss,less,json AutoFormatBuffer js-beautify
--   autocmd FileType java AutoFormatBuffer google-java-format
--   autocmd FileType make setlocal noexpandtab  " Don't expand tabs in Makefiles
--   " autocmd FileType python AutoFormatBuffer yapf
--   " make the QuickFix window automatically appear if :make has any errors.
--   autocmd FileType typescript setlocal balloonexpr=tsuquyomi#balloonexpr()
--   autocmd FileType typescript setlocal completeopt+=menu,preview
--   autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
--   autocmd InsertLeave * match ExtraWhiteSpace /\s\+$/
--
--   " indent plugin overrides global .py indent settings, we re-override them here.
--   autocmd FileType python setl sw=2 ts=2 sts=2
--
--   autocmd BufRead,BufNewFile ~/.worklog.md setlocal norelativenumber
-- augroup END
--
-- augroup gitconfig
--   autocmd!
--   autocmd BufRead,BufNewFile *.gitconfig setlocal noexpandtab tabstop=4 shiftwidth=4
-- augroup END
--
-- " Plugins config
--
-- " clang
-- let clang_format_executable="~/bin/clang-format"
--
-- " ctrlp
-- let g:ctrlp_clear_cache_on_exit = 1
-- let g:ctrlp_cmd = 'CtrlPMixed'
-- let g:ctrlp_dotfiles = 0
-- let g:ctrlp_match_window_reversed = 0
-- let g:ctrlp_mruf_relative = 1
-- let g:ctrlp_max_height = 50
-- let g:ctrlp_working_path_mode = 0
-- let g:ctrlp_extensions = ['tag', 'buffertag', 'quickfix', 'dir', 'rtscript',
--                           \ 'undo', 'line', 'changes', 'mixed', 'bookmarkdir',
--                           \ 'autoignore']
--
-- " typescript
-- let g:typescript_compiler_binary = 'tsc'
-- let g:typescript_compiler_options = '--lib es2015,dom'
-- let g:tsuquyomi_disable_quickfix = 1
--
-- " Allows you to configure % to match more than just single characters
-- runtime macros/matchit.vim
--
-- " fzf
-- let g:fzf_layout = { 'down': '~60%' }
-- let g:fzf_history_dir = '~/.local/share/fzf-history'
-- set runtimepath+=~/.fzf
-- let $FZF_DEFAULT_COMMAND='find . \( -name public\/storage -o -name public\/cache -name tmp\/cache -o -name .git \) -prune -o -print'
-- let $FZF_DEFAULT_COMMAND='ag -p ~/.gitignore -g ""'
--
-- let g:omni_sql_no_default_maps = 1
--
